================================================================================
                                                                  *renamer.nvim*

Renamer.nvim is a plugin for a Visual-Studio-Code-like user interface for
renaming in neovim. It provides several ways to configure its aspect and uses
the LSP API to rename the current word under the cursor.

Getting started with renamer:
  1. Run `:checkhealth renamer` to make sure everything is installed.
  2. Put a `require("renamer").setup()` call somewhere in your neovim config.
  3. Read |renamer.setup| to check what config keys are available and what
     you can put inside the setup call
  4. Evalulate it working with `:lua require("renamer").rename()`

To find out more:
https://github.com/filipdutescu/renamer.nvim

  :h renamer.setup
  :h renamer.rename
  :h renamer.mappings



===============================================================================
                                                              *renamer.setup()*

renamer.setup({opts}) 
    Setup function to be run by the user. Configures the aspect of the renamer
    user interface. Used to change things such as the title or border of the
    popup.

    Usage:
    >
    local mappings_utils = require('renamer.mappings.utils')
    require('renamer').setup {
        -- The popup title, shown if `border` is true
        title = 'Rename',
        -- The padding around the popup content
        padding = { 0, 0, 0, 0 },
        -- Whether or not to shown a border around the popup
        border = true,
        -- The characters which make up the border
        border_chars = { '─', '│', '─', '│', '╭', '╮', '╯', '╰' },
        -- Whether or not to highlight the current word references through LSP
        show_refs = true,
        -- The string to be used as a prompt prefix. It also sets the buffer to
        -- be a prompt
        prefix = '',
        -- The keymaps available while in the `renamer` buffer. The example below
        -- overrides the default values, but you can add others as well.
        mappings = {
            ['<c-i>'] = mappings_utils.set_cursor_to_start,
            ['<c-a>'] = mappings_utils.set_cursor_to_end,
            ['<c-e>'] = mappings_utils.set_cursor_to_word_end,
            ['<c-b>'] = mappings_utils.set_cursor_to_word_start,
            ['<c-c>'] = mappings_utils.clear_line,
            ['<c-u>'] = mappings_utils.undo,
            ['<c-r>'] = mappings_utils.redo,
        },
    }
<


    Parameters: ~
        {opts} (table)  options to pass to the setup function

    Fields: ~
        {title}         (string)    title of the popup, shown on the top border
                                    (default: 'Rename')
        {padding}       (list)      list of integer values that define the
                                    padding of the popup, as such:
                                    above/right/below/left
                                    (default: { 0, 0, 0, 0 })
        {border}        (boolean)   defines whether or not to draw the border
                                    (default: true)
        {border_chars}  (list)      list of characters to use for the border,
                                    with the possible values being:
                                    - 1 character to use all around, e.g. '*'
                                    - border/corners
                                    - top/right/bottom/left
                                    - top/right/bottom/left, followed by
                                      topleft/topright/botright/botleft
                                    (default: { '─', '│', '─', '│',
                                    '╭', '╮', '╯', '╰' })
        {show_refs}     (boolean)   defines whether or not to highlight the
                                    current word references through the
                                    built-in LSP
        {prefix}        (string)    the character to be used as a prompt
                                    prefix (default: '', meaning the popup is
                                    not defined as a prompt)
        {mappings}      (table)     the keymaps that should be available in
                                    the buffer, alongside their respective
                                    actions (default: see
                                    |lua/renamer/mappings/init.lua|)




===============================================================================
                                                             *renamer.rename()*

renamer.rename()
   Function that renames the word under the cursor, using Neovim's built in
   LSP feature (see |vim.lsp.buf.rename()|). Creates a popup next to the
   cursor, starting at the beginning of the word.

   The popup is drawn below the current line, if there is enough space,
   otherwise on the one above it.

   Usage:
   >
   require('renamer').rename()




===============================================================================
                                                             *renamer.mappings*

Mappings are different key combinations used to help you navigate the `renamer`
buffer window. The following are mapped by default and can be overriden as
described in |renamer.setup|:

                                                                        *<c-i>*
<c-i>               Go to the start of the line (or buffer, since it only
                    contains one line). Behind the scenes, it uses the "I"
                    normal mode keymap.

                        See `:help I`

                                                                        *<c-a>*
<c-a>               Go to the end of the line (or buffer, since it only
                    contains one line). Behind the scenes, it uses the "A"
                    normal mode keymap.

                        See `:help A`

                                                                        *<c-e>*
<c-e>               Go to the end of the word currently under the cursor.
                    Behind the scenes, it uses the "e" normal mode keymap.

                        See `:help e`

                                                                        *<c-b>*
<c-b>               Go to the beginning of the word currently under the
                    cursor. Behind the scenes, it uses the "b" normal mode
                    keymap.

                        See `:help b`

                                                                        *<c-c>*
<c-c>               Clears the line (or buffer, since it only contains one
                    line). Behind the scenes, it uses the "0C" normal mode
                    keymaps.

                        See `:help 0`, `:help C`

                                                                        *<c-u>*
<c-u>               Undo changes. Behind the scenes, it uses the "u" normal
                    mode keymap.

                        See `:help u`

                                                                        *<c-r>*
<c-r>               Redo changes that were undone. Behind the scenes, it uses
                    the "<c-r>" normal mode keymap.

                        See ``:help CTRL-R`


vim:tw=78:ts=8:ft=help:norl:
